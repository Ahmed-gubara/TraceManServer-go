// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/trcman_services.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StringMessage struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringMessage) Reset()         { *m = StringMessage{} }
func (m *StringMessage) String() string { return proto.CompactTextString(m) }
func (*StringMessage) ProtoMessage()    {}
func (*StringMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a3a67457b1a0f7, []int{0}
}

func (m *StringMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringMessage.Unmarshal(m, b)
}
func (m *StringMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringMessage.Marshal(b, m, deterministic)
}
func (m *StringMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringMessage.Merge(m, src)
}
func (m *StringMessage) XXX_Size() int {
	return xxx_messageInfo_StringMessage.Size(m)
}
func (m *StringMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StringMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StringMessage proto.InternalMessageInfo

func (m *StringMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*StringMessage)(nil), "proto.StringMessage")
}

func init() { proto.RegisterFile("proto/trcman_services.proto", fileDescriptor_16a3a67457b1a0f7) }

var fileDescriptor_16a3a67457b1a0f7 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x29, 0x4a, 0xce, 0x4d, 0xcc, 0x8b, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e,
	0x2d, 0xd6, 0x03, 0x8b, 0x0a, 0xb1, 0x82, 0x29, 0x25, 0x4d, 0x2e, 0xde, 0xe0, 0x92, 0xa2, 0xcc,
	0xbc, 0x74, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x21, 0x09, 0x2e, 0xf6, 0xe4, 0xfc, 0xbc,
	0x92, 0xd4, 0xbc, 0x12, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0xd7, 0xe8, 0x38, 0x23,
	0x17, 0x6f, 0x08, 0xd8, 0xac, 0x60, 0x88, 0x51, 0x42, 0x0e, 0x5c, 0x02, 0x9e, 0xc5, 0x50, 0x4e,
	0x50, 0x69, 0x5e, 0x5e, 0x66, 0x5e, 0xba, 0x90, 0x08, 0xc4, 0x7c, 0x3d, 0x14, 0x53, 0xa5, 0xb0,
	0x8a, 0x2a, 0x31, 0x08, 0x59, 0x73, 0x71, 0x06, 0x97, 0x26, 0x15, 0x27, 0x17, 0x65, 0x26, 0xa5,
	0x92, 0xa6, 0xd5, 0x80, 0x51, 0xc8, 0x9c, 0x8b, 0x3d, 0xa0, 0x34, 0x29, 0x27, 0xb3, 0x38, 0x83,
	0x34, 0xad, 0x49, 0x6c, 0x60, 0x61, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xac, 0x90,
	0x4a, 0x21, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrcmanServiceClient is the client API for TrcmanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrcmanServiceClient interface {
	IsServiceRunning(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error)
	Subscribe(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (TrcmanService_SubscribeClient, error)
	Publish(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error)
}

type trcmanServiceClient struct {
	cc *grpc.ClientConn
}

func NewTrcmanServiceClient(cc *grpc.ClientConn) TrcmanServiceClient {
	return &trcmanServiceClient{cc}
}

func (c *trcmanServiceClient) IsServiceRunning(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, "/proto.TrcmanService/IsServiceRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trcmanServiceClient) Subscribe(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (TrcmanService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TrcmanService_serviceDesc.Streams[0], "/proto.TrcmanService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &trcmanServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrcmanService_SubscribeClient interface {
	Recv() (*StringMessage, error)
	grpc.ClientStream
}

type trcmanServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *trcmanServiceSubscribeClient) Recv() (*StringMessage, error) {
	m := new(StringMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trcmanServiceClient) Publish(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, "/proto.TrcmanService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrcmanServiceServer is the server API for TrcmanService service.
type TrcmanServiceServer interface {
	IsServiceRunning(context.Context, *StringMessage) (*StringMessage, error)
	Subscribe(*StringMessage, TrcmanService_SubscribeServer) error
	Publish(context.Context, *StringMessage) (*StringMessage, error)
}

// UnimplementedTrcmanServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTrcmanServiceServer struct {
}

func (*UnimplementedTrcmanServiceServer) IsServiceRunning(ctx context.Context, req *StringMessage) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsServiceRunning not implemented")
}
func (*UnimplementedTrcmanServiceServer) Subscribe(req *StringMessage, srv TrcmanService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedTrcmanServiceServer) Publish(ctx context.Context, req *StringMessage) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func RegisterTrcmanServiceServer(s *grpc.Server, srv TrcmanServiceServer) {
	s.RegisterService(&_TrcmanService_serviceDesc, srv)
}

func _TrcmanService_IsServiceRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrcmanServiceServer).IsServiceRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TrcmanService/IsServiceRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrcmanServiceServer).IsServiceRunning(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrcmanService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StringMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrcmanServiceServer).Subscribe(m, &trcmanServiceSubscribeServer{stream})
}

type TrcmanService_SubscribeServer interface {
	Send(*StringMessage) error
	grpc.ServerStream
}

type trcmanServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *trcmanServiceSubscribeServer) Send(m *StringMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _TrcmanService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrcmanServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TrcmanService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrcmanServiceServer).Publish(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrcmanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TrcmanService",
	HandlerType: (*TrcmanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsServiceRunning",
			Handler:    _TrcmanService_IsServiceRunning_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _TrcmanService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _TrcmanService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/trcman_services.proto",
}
